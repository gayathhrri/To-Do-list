<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f3e5f5; /* Lavender background color */
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 420px;
        }

        h1 {
            text-align: center;
            color: #7e57c2; /* Medium purple color for the header */
            margin-bottom: 24px;
        }

        input[type="text"] {
            width: calc(100% - 24px);
            padding: 14px;
            margin-bottom: 16px;
            border-radius: 8px;
            border: 1px solid #d1c4e9; /* Light purple border */
            font-size: 16px;
            background-color: #ede7f6; /* Lavender input background */
        }

        button {
            padding: 14px;
            border: none;
            border-radius: 8px;
            background-color: #7e57c2; /* Medium purple color */
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin-bottom: 12px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #5e35b1; /* Darker purple on hover */
        }

        button:disabled {
            background-color: #b39ddb; /* Disabled state color */
            cursor: not-allowed;
        }

        ul {
            list-style: none;
            padding: 0;
        }

        li {
            background-color: #e1bee7; /* Light lavender color */
            padding: 14px;
            border: 1px solid #b39ddb; /* Light purple border */
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: background-color 0.3s;
        }

        li.completed {
            text-decoration: line-through;
            color: #757575;
            background-color: #d1c4e9; /* Different lavender for completed tasks */
        }

        .task-buttons button {
            margin-left: 6px;
            background-color: #9575cd; /* Medium purple for task buttons */
            border-radius: 50%;
            width: 36px;
            height: 36px;
            padding: 0;
            font-size: 18px;
            color: #ffffff;
        }

        .task-buttons button.delete {
            background-color: #ab47bc; /* Brighter purple for delete button */
            color: #fff;
        }

        .task-buttons button:hover {
            background-color: #7e57c2; /* Darker purple on hover */
        }

        .task-buttons button.delete:hover {
            background-color: #8e24aa; /* Darker purple on delete hover */
        }

        .filter-buttons {
            display: flex;
            justify-content: center;
            margin-bottom: 15px;
        }

        .filter-buttons button {
            margin: 5px;
            padding: 10px 16px;
            border-radius: 8px;
            border: 1px solid #d1c4e9; /* Light purple border */
            background-color: #9575cd; /* Medium purple */
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .filter-buttons button:hover {
            background-color: #7e57c2; /* Darker purple on hover */
        }

        .filter-buttons button.active {
            background-color: #5e35b1; /* Darkest purple for active state */
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>To-Do List</h1>
        <input type="text" id="taskInput" placeholder="Add a new task">
        <button id="addTaskBtn" onclick="addTask()">Add Task</button>
        <div class="filter-buttons">
            <button onclick="filterTasks('all')" class="active">All</button>
            <button onclick="filterTasks('completed')">Completed</button>
            <button onclick="filterTasks('pending')">Pending</button>
        </div>
        <ul id="taskList"></ul>
    </div>

    <script>
        const taskInput = document.getElementById('taskInput');
        const taskList = document.getElementById('taskList');
        let tasks = [];

        function addTask() {
            const taskText = taskInput.value.trim();
            if (taskText === '') return;

            const task = {
                id: Date.now(),
                text: taskText,
                completed: false
            };

            tasks.push(task);
            taskInput.value = '';
            renderTasks();
        }

        function toggleComplete(id) {
            const task = tasks.find(t => t.id === id);
            task.completed = !task.completed;
            renderTasks();
        }

        function deleteTask(id) {
            tasks = tasks.filter(t => t.id !== id);
            renderTasks();
        }

        function editTask(id) {
            const newTaskText = prompt('Edit the task:', tasks.find(t => t.id === id).text);
            if (newTaskText === null) return;

            tasks = tasks.map(t => t.id === id ? { ...t, text: newTaskText } : t);
            renderTasks();
        }

        function filterTasks(status) {
            document.querySelectorAll('.filter-buttons button').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`.filter-buttons button[onclick="filterTasks('${status}')"]`).classList.add('active');
            renderTasks(status);
        }

        function renderTasks(filter = 'all') {
            taskList.innerHTML = '';

            const filteredTasks = tasks.filter(task => {
                if (filter === 'completed') return task.completed;
                if (filter === 'pending') return !task.completed;
                return true;
            });

            filteredTasks.forEach(task => {
                const li = document.createElement('li');
                li.className = task.completed ? 'completed' : '';

                li.innerHTML = `
                    <span>${task.text}</span>
                    <div class="task-buttons">
                        <button onclick="toggleComplete(${task.id})">${task.completed ? 'Undo' : 'Done'}</button>
                        <button onclick="editTask(${task.id})" class="edit">‚úèÔ∏è</button>
                        <button onclick="deleteTask(${task.id})" class="delete">üóëÔ∏è</button>
                    </div>
                `;

                taskList.appendChild(li);
            });
        }
    </script>
</body>

</html>
